Back to the [Main] 

We need to revise the consistency check labels in the drop down list and also correct certain queries, since they don't give the correct results

|| *Consistency check label (for drop down list)* || *Explanation (what should it do)* || *Info to be displayed* || * Status* ||
|| Check: Concepts (published,validated) with less or more than one main label in one particular language || Each concept should have exactly one main descriptor in any language for which labels exist. All other cases should be listed here. || concept,Date Created, Date last modified,Status || to be implemented ||
|| Check: Concepts (published,validated), which have the same main label in a particular language.  || The main labels of a language shall be unique, i.e. I should not have a concept c_123 and c_145 both with the main label "vessel" in English. Such concepts should be listed here. || concept1,Status1,concept2,Status2 || to be implemented ||
|| Check: Terms that are not associated to any concept (orphaned terms) || Every term instance in the system should have the relationship r_means which links it to a concept instance. Terms that are not linked to any concept with this relationship should be listed here. || term,Date Created, Date Last Modified, Status || to be implemented ||
|| Check: Concepts/Terms with no status || Every concept or term must have a status assigned. In case of system errors or imports, terms or concepts might occur without status. Such concepts and terms shall be listed here || Concept/Term,Date Created, Date Last Modified, Status || implemented ||
|| Check: Children of deprecated concepts || A concept that is deprecated will eventually disappear from the system. This check shall list just the direct sub-concepts of all deprecated concepts to give an overview of the concepts that need to be reorganized in ths hierarchy || Concept,Date Created, Date Last Modified, Status || implemented ||
|| Check: Concepts that have no sub classes AND no other relationships || These concepts should still be sub classes of c_domain_concept, so they are basically top level concepts but have no other relationship. Such concepts shall be listed here, since they should be reassessed for their need and  || Concept,Date Created, Date Last Modified, Status || implemented ||
|| Check: Concepts that have no sub classes AND no other relationships || These concepts should still be sub classes of c_domain_concept, so they are basically top level concepts but have no other relationship. Such concepts shall be listed here, since they should be reassessed for their need and  || Concept,Date Created, Date Last Modified, Status || implemented ||
|| Check: Concepts that are in the same hierarchy branch AND have additional semantic relationship(s) || Example: cow isa animal isa organism / cow r_is_part_of organism --> cow is a sub class of organism (2 levels below in the hierarchy) but also has a relationship which is a sub_property_of r_has_related_concept. Such concepts shall be listed here. This should not be done, i.e. concepts that have already a sub class relationship should not have other semantic relationships. However, there might be sub_category relationships for specific schemes. || concept1,Status1,semantic relationship,concept2,Status2 || to be implemented ||
|| Check: Concepts which have the same ingoing and outgoing non-symmetric relationship || Example: c_123 affects c_321 AND c_321 affects c_123. Such concepts should be listed here, since it is an incorrect use and should be avoided. The correct relationship should be the inverse c_321 is_affected_by c_123 and the same relationship should not be assigned both ways, unless it is symmetric! || concept1,Status1,semantic relationship,concept2,Status2 || to be implemented ||
|| Check: Concepts that have not been assigned their inverse relationship || Example: c_123 affects c_321, but no relationship in the other direction. Such concepts should be listed, since they have been assigned a relationship which has an inverse relationship that has not been assigned. Such cases should not exist. || concept1,Status1,semantic relationship,concept2,Status2 || to be implemented ||
|| Check: Concepts (not deprecated) with all terms 'deprecated' or 'proposed deprecated' || If all terms of a concept are deprecated, it is an indication for the concept to be deprecated as well. This concept should be reassessed.  || Concept,Date Created, Date Last Modified,Status || to be checked ||
|| Check: Terms that have no relationships to other terms || Terms shall be listed here with no term-to-term relationship at all. Such terms should be checked, since they might be orphaned terms. || Term,Concept,Date Created, Date Last Modified,Status || to be checked ||
|| List: Concepts with status 'deprecated' or 'proposed deprecated' || only for info  || concept,Date Created, Date Last Modified,Status || implemented ||
|| List: Unused relationships || For info to see what relationships are not applied. Taken into consideration should be sub_properties of r_has_related_concept and r_has_related_term  || Relationship,Date Created, Date Last Modified,Status || implemented ||
|| List: Concepts (validated,published) without any definition || For info to see what concepts don't have any definition assigned yet  || Concept,Date Created, Date Last Modified,Status || implemented ||
|| List: Terms that have exact same spelling in different languages || Example: c_123 has the terms butter(en),burro(it) and c_321 has the terms donkey(en),burro(es). Burro is the same term in both concepts but describes different concepts. Such terms and concepts should be listed here. But also cases, where both terms refer to the same concept. || Concept,Term,Date Created, Date Last Modified,Status || to be implemented ||
|| List: Terms that have no AGROVOC code || For info. This shall be dealt with in the Export module. The list shall be grouped by concept, i.e. all terms that belong to the same concept shall show in consecutive rows. || Term,Concept,Date Created, Date Last Modified,Status || to be checked ||
|| List: Concepts that have no term yet in a specified language || When the user select this option, another language drop down box should show up, where the user can select the specific language. The query retrieves all the concepts that have not yet a term in this particular language. || Concept,Date Created, Date Last Modified,Status || to be implemented ||




= Open points =

  * point1


= Links =

  * link1

 
 
= Ideas = 
 